#calculate the preposterior
post.un<-prior*li
post<-post.un/sum(post.un, na.rm=T)
post_ent<--sum(log2(post)*post, na.rm=T)
if(run==1 & count==1)
{
#Initialise results frame
res<-data.frame(run = run, ground_truth=gt, step=count, action = greedy_action, outcome = outcome, eig = out_greedy[[1]], prior_ent = prior_ent, post_ent = post_ent)
} else {
#Add a line to it
res<-rbind(res,
data.frame(run = run, ground_truth = gt, step=count, action = greedy_action, outcome = outcome, eig = out_greedy[[1]], prior_ent = prior_ent, post_ent = post_ent))
}
prior<-post
prior_ent<-post_ent
}
steps_required[run]<-count
cat(run, count, '\n')
}
res
steps_required
#Example:
action_space[res$action[res$run==1],]
load("~/li_table.rdata")
View(li_table)
View(H)
#Balance beam test
lhs<-sum(H[h,action_space[a,]==1])
# #Precompute outcome of all possible actions under all possible hypotheses (takes 10 mins)
li_table <- matrix(NA, nrow(action_space), nrow(H))
for (h in 1:nrow(H))
?"/"
?"rep"
?"which"
View(res)
#Example:
action_space[res$action[res$run==1],]
source('~/Documents/HCN MSc/Scripts for diss and practice/info_gain_puzzle.R', echo=TRUE)
source('~/Documents/HCN MSc/Scripts for diss and practice/info_gain_puzzle.R', echo=TRUE)
?"["
rm(list=ls())
# Make hypotheses
H <- data.frame(matrix(10, nrow=24, ncol=12, byrow=T))
H
# Not sure of this bit
for(i in 1:12)
{
H[i,i]<-11
H[i+12,i]<-9
}
H
# rownames
row.names(H) <- paste0('H', 1:24)
# Get all the combinations
exhaustive_action_space <- expand.grid(0:2,0:2,0:2,0:2,0:2,0:2,0:2,0:2,0:2,0:2,0:2,0:2)
action_space <- exhaustive_action_space[rowSums(exhaustive_action_space==1)==rowSums(exhaustive_action_space==2) & rowSums(exhaustive_action_space==0)!=12,]
names(action_space) <- names(H) <- paste0('S',1:12)
init_prior <- rep(1/24, nrow(H)) # Allocate 1/24 'certainty' to each hypothesis
sum(init_prior)
# #Precompute outcome of all possible actions under all possible hypotheses (takes 10 mins)
# That is, for each hypothesis (h in 1:nrow(H)), do each action a in action_space, which is a balance beam test, where you sum how many hypotheses that have actions 1 or actions 2
li_table <- matrix(NA, nrow(action_space), nrow(H))
print(h[1])
print(H[1,])
print(action_space[1,])
h <- 1
a <- 1
H[h,action_space[a,]==1]
action_space[a,]==1
# #Precompute outcome of all possible actions under all possible hypotheses (takes 10 mins)
# That is, for each hypothesis (h in 1:nrow(H)), do each action a in action_space, which is a balance beam test, where you sum how many hypotheses that have actions 1 or actions 2
# For every action and every hypothesis, we need to know outcome (prob 1) (If this is right H and you did this a, what would happen)
li_table <- matrix(NA, nrow(action_space), nrow(H))
for (h in 1:nrow(H))
{
for (a in 1:nrow(action_space))
{
#Balance beam test
lhs<-sum(H[h,action_space[a,]==1])
rhs<-sum(H[h,action_space[a,]==2])
li_table[a, h]<-sign(rhs-lhs)#1: rhs heavier, 0: same weight, -1: lhs heavier
}
print(h)
}
View(li_table)
setwd("~/")
# Not sure what this does that is not done already
# save(file='li_table.rdata', li_table)
load('li_table.rdata')
View(li_table)
#Let's see if greedy EIG gets us there in 3 reliably
recursive_EIG <- function(prior, depth=0, max_depth = 3)
{
prior_entropy <- -sum(log2(prior)*prior, na.rm=T)
eig<-rep(NA, nrow(action_space))
depth<-depth+1
#For each action
for (a in 1:nrow(action_space))
{
mar_li<-ig<-rep(NA, 3) # Marginal likelihood?
#For each outcome
for (o in c(-1,0,1))
{
#Likelihood function is a zero for all hypotheses incompatible with the outcome
#and 1 otherwise
li<-rep(0, 24)
li[which(li_table[a,]==o)]<-1
#calculate the preposterior
post.un<-prior*li
post<-post.un/sum(post.un)
mar_li[o+2]<-sum(prior[which(li_table[a,]==o)])
#if at depth:
if (depth>=max_depth)
{
#What is the posterior eig?
ig[o+2]<- prior_entropy - -sum(log2(post)*post, na.rm=T)
#And what is the marginal probability of the outcome
} else {
#else call recursive_EIG
tmp<-recursive_EIG(post, depth=depth, max_depth = max_depth)
ig[o+2]<-tmp[[1]]
}
eig[a]<-sum(ig*mar_li, na.rm=T)
}#o
}#a
#Return the marginal EIG (and the (set of) winning actions)
list(max(eig), which(eig==max(eig)))
}
#Randomly sample the ground truth
gt<-sample(1:24, 1)
#Randomly sample the ground truth
gt<-sample(1:24, 1)
count<-0
prior<-init_prior
prior_ent<--sum(log2(prior)*prior, na.rm=T)
run <- 1
while(prior_ent>0)
{
count<-count+1
#Compute the EIG and set of best options
out_greedy<-recursive_EIG(prior, max_depth = 1)
#Use the first best action for the first run since it is easier to make sense of:
if(run==1)
{
greedy_action<-out_greedy[[2]][1]
} else
{
#Choose a random best action on other runs
if(length(out_greedy)>1)
{
greedy_action<-sample(out_greedy[[2]], 1)
} else {
greedy_action<-out_greedy[[2]]
}
}
#Get outcome - get any random gt and look up li for what would happen, as we have alredy got them all
outcome<-li_table[greedy_action,gt]
#Update belief
li<-rep(0, 24)
li[which(li_table[greedy_action,]==outcome)]<-1
#calculate the preposterior
post.un<-prior*li
post<-post.un/sum(post.un, na.rm=T)
post_ent<--sum(log2(post)*post, na.rm=T)
if(run==1 & count==1)
{
#Initialise results frame
res<-data.frame(run = run, ground_truth=gt, step=count, action = greedy_action, outcome = outcome, eig = out_greedy[[1]], prior_ent = prior_ent, post_ent = post_ent)
} else {
#Add a line to it
res<-rbind(res,
data.frame(run = run, ground_truth = gt, step=count, action = greedy_action, outcome = outcome, eig = out_greedy[[1]], prior_ent = prior_ent, post_ent = post_ent))
}
prior<-post
prior_ent<-post_ent
}
View(res)
count<-0
prior<-init_prior
prior_ent<--sum(log2(prior)*prior, na.rm=T)
#Compute the EIG and set of best options - this is the main bit, the rest is selecting answer
out_greedy<-recursive_EIG(prior, max_depth = 1)
View(out_greedy)
out_greedy[2]
action_space["553"]
action_space[553]
action_space[553,]
#Update belief w bayes
li<-rep(0, 24)
li[which(li_table[greedy_action,]==outcome)]<-1
li
li[20]
#calculate the preposterior - often need this QQQ
post.un<-prior*li #unnormalised posterior
post.un
sum(post.un)
post<-post.un/sum(post.un, na.rm=T) # denom of bayes - totals it to 1
post_ent<--sum(log2(post)*post, na.rm=T)
post
sum(post)
post_ent<--sum(log2(post)*post, na.rm=T)
out_greedy[[2]]
rm(list=ls())
# Make hypotheses
H <- data.frame(matrix(10, nrow=24, ncol=12, byrow=T))
# This is specifying all possible ground truths
for(i in 1:12)
{
H[i,i]<-11
H[i+12,i]<-9
}
View(H)
?paste0
# rownames
row.names(H) <- paste0('H', 1:24)
# Get all the combinations
exhaustive_action_space <- expand.grid(0:2,0:2,0:2,0:2,0:2,0:2,0:2,0:2,0:2,0:2,0:2,0:2)
action_space <- exhaustive_action_space[rowSums(exhaustive_action_space==1)==rowSums(exhaustive_action_space==2) & rowSums(exhaustive_action_space==0)!=12,]
names(action_space) <- names(H) <- paste0('S',1:12)
H
init_prior <- rep(1/24, nrow(H)) # Allocate 1/24 'certainty' to each hypothesis
H
init_prior
# Not sure what this does that is not done already
# save(file='li_table.rdata', li_table)
load('li_table.rdata')
head(li_table)
head(action_space)
View(action_space)
View(H)
foot(li_table)
bottom(li_table)
tail(li_table)
tail(action_space)
fft
list
which()
which
recursive_EIG <- function(prior, depth=0, max_depth = 3)
{
prior_entropy <- -sum(log2(prior)*prior, na.rm=T)
eig<-rep(NA, nrow(action_space))
depth<-depth+1
#For each action
for (a in 1:nrow(action_space))
{
mar_li<-ig<-rep(NA, 3) # Marginal likelihood?
#For each outcome
for (o in c(-1,0,1))
{
#Likelihood function is a zero for all hypotheses incompatible with the outcome
#and 1 otherwise
li<-rep(0, 24)
li[which(li_table[a,]==o)]<-1
#calculate the preposterior
post.un<-prior*li
post<-post.un/sum(post.un)
mar_li[o+2]<-sum(prior[which(li_table[a,]==o)])
#if at depth:
if (depth>=max_depth)
{
#What is the posterior eig?
ig[o+2]<- prior_entropy - -sum(log2(post)*post, na.rm=T)
#And what is the marginal probability of the outcome
} else {
#else call recursive_EIG
tmp<-recursive_EIG(post, depth=depth, max_depth = max_depth)
ig[o+2]<-tmp[[1]]
}
eig[a]<-sum(ig*mar_li, na.rm=T)
} #o
} #a
#Return the marginal EIG (and the (set of) winning actions)
list(max(eig), which(eig==max(eig)))
}
# Make hypotheses
H <- data.frame(matrix(10, nrow=24, ncol=12, byrow=T))
# This is specifying all possible ground truths - one heavier, one lighter
# (H1-H12 is the piece is heavier, and i=i. H13-24 is the piece is lighter, and it is i+12).
for(i in 1:12)
{
H[i,i]<-11
H[i+12,i]<-9
}
# rownames
row.names(H) <- paste0('H', 1:24)
# Get all the combinations
exhaustive_action_space <- expand.grid(0:2,0:2,0:2,0:2,0:2,0:2,0:2,0:2,0:2,0:2,0:2,0:2)
action_space <- exhaustive_action_space[rowSums(exhaustive_action_space==1)==rowSums(exhaustive_action_space==2) & rowSums(exhaustive_action_space==0)!=12,]
names(action_space) <- names(H) <- paste0('S',1:12)
# save(file='li_table.rdata', li_table)
load('li_table.rdata')
init_prior <- rep(1/24, nrow(H)) # Allocate 1/24 'certainty' to each hypothesis
prior <- init_prior
prior
prior_entropy <- -sum(log2(prior)*prior, na.rm=T)
eig<-rep(NA, nrow(action_space)) # exepected info gain for each action
depth <- 1
a <- 1
mar_li<-ig<-rep(NA, 3) # Marginal likelihood?
o <- -1
#Likelihood function is a zero for all hypotheses incompatible with the outcome
#and 1 otherwise
li<-rep(0, 24)
li
li[which(li_table[a,]==o)]<-1 # get the bit of li_table that corresponds to current a, and look at which h's get this o. Taking the compressed li and turning it to vector w li of each possibility. Put a 1 in for anything compatible with the outcome
li
H
H[li,]
li
H[,li]
H[li==1]
H[li == [,2]]
H[li == 1]
H[li == 1,]
#calculate the preposterior (imagined post you would have if you had seen the o given a)
post.un<-prior*li
post.un
post<-post.un/sum(post.un) # normalise
post
mar_li
mar_li[o+2]<-sum(prior[which(li_table[a,]==o)]) # The o+2 is to get it to correspond to the column identities. here we cheated and used the outcome loop as the outcome vector, loping -1, to 1.
mar_li
o <- 0
#Likelihood function is a zero for all hypotheses incompatible with the outcome
#and 1 otherwise
li<-rep(0, 24) # start it off w all 0
li[which(li_table[a,]==o)]<-1 # get the bit of li_table that corresponds to current a, and look at which h's get this o. Taking the compressed li and turning it to vector w li of each possibility. Put a 1 in for anything compatible with the outcome
li
#calculate the preposterior (imagined post you would have if you had seen the o given a)
post.un<-prior*li
post<-post.un/sum(post.un) # normalise . So this 1 try, we have 50/50 between H2 and H13
post.un
post
mar_li[o+2]<-sum(prior[which(li_table[a,]==o)]) # The o+2 is to get it to correspond to the column identities. here we cheated and used the outcome loop as the outcome vector, loping -1, to 1. This future would be informative, but we're unlikely to see it, cos only if gt is 2/24 of the possible ones.
mar_li
o <- 1
#Likelihood function is a zero for all hypotheses incompatible with the outcome
#and 1 otherwise
li<-rep(0, 24) # start it off w all 0
li[which(li_table[a,]==o)]<-1 # get the bit of li_table that corresponds to current a, and look at which h's get this o. Taking the compressed li and turning it to vector w li of each possibility. Put a 1 in for anything compatible with the outcome
#calculate the preposterior (imagined post you would have if you had seen the o given a)
post.un<-prior*li
post<-post.un/sum(post.un) # normalise . So this 1 try, we have 50/50 between H2 and H13
mar_li[o+2]<-sum(prior[which(li_table[a,]==o)]) # The o+2 is to get it to correspond to the column identities. here we cheated and used the outcome loop as the outcome vector, loping -1, to 1. This future would be informative, but we're unlikely to see it, cos only if gt is 2/24 of the possible ones.
mar_li
sum(mar_li)
for (o in c(-1,0,1))
{
#Likelihood function is a zero for all hypotheses incompatible with the outcome
#and 1 otherwise
li<-rep(0, 24) # start it off w all 0
li[which(li_table[a,]==o)]<-1 # get the bit of li_table that corresponds to current a, and look at which h's get this o. Taking the compressed li and turning it to vector w li of each possibility. Put a 1 in for anything compatible with the outcome
#calculate the preposterior (imagined post you would have if you had seen the o given a)
post.un<-prior*li
post<-post.un/sum(post.un) # normalise . So this 1 try, we have 50/50 between H2 and H13
mar_li[o+2]<-sum(prior[which(li_table[a,]==o)]) # The o+2 is to get it to correspond to the column identities. here we cheated and used the outcome loop as the outcome vector, loping -1, to 1. This future would be informative, but we're unlikely to see it, cos only if gt is 2/24 of the possible ones.
# 79-83 is bayes for each o of a
#if at depth:
if (depth>=max_depth)
{
#What is the posterior eig?
ig[o+2]<- prior_entropy - -sum(log2(post)*post, na.rm=T)
#And what is the marginal probability of the outcome
} else {
#else call recursive_EIG
tmp<-recursive_EIG(post, depth=depth, max_depth = max_depth)
ig[o+2]<-tmp[[1]]
}
eig[a]<-sum(ig*mar_li, na.rm=T)
}
max_depth <- 1
for (o in c(-1,0,1))
{
#Likelihood function is a zero for all hypotheses incompatible with the outcome
#and 1 otherwise
li<-rep(0, 24) # start it off w all 0
li[which(li_table[a,]==o)]<-1 # get the bit of li_table that corresponds to current a, and look at which h's get this o. Taking the compressed li and turning it to vector w li of each possibility. Put a 1 in for anything compatible with the outcome
#calculate the preposterior (imagined post you would have if you had seen the o given a)
post.un<-prior*li
post<-post.un/sum(post.un) # normalise . So this 1 try, we have 50/50 between H2 and H13
mar_li[o+2]<-sum(prior[which(li_table[a,]==o)]) # The o+2 is to get it to correspond to the column identities. here we cheated and used the outcome loop as the outcome vector, loping -1, to 1. This future would be informative, but we're unlikely to see it, cos only if gt is 2/24 of the possible ones.
# 79-83 is bayes for each o of a
#if at depth:
if (depth>=max_depth)
{
#What is the posterior eig?
ig[o+2]<- prior_entropy - -sum(log2(post)*post, na.rm=T)
#And what is the marginal probability of the outcome
} else {
#else call recursive_EIG
tmp<-recursive_EIG(post, depth=depth, max_depth = max_depth)
ig[o+2]<-tmp[[1]]
}
eig[a]<-sum(ig*mar_li, na.rm=T)
}
ig
eig[a]<-sum(ig*mar_li, na.rm=T) # having thought about the li's, merge the 3 igs into expected ig
eig[[1]]
for (a in 1:nrow(action_space))
{
mar_li<-ig<-rep(NA, 3) # Marginal likelihood? this gives a vector of 3 - the li for each o of this a
#For each outcome
for (o in c(-1,0,1))
{
#Likelihood function is a zero for all hypotheses incompatible with the outcome
#and 1 otherwise
li<-rep(0, 24) # start it off w all 0
li[which(li_table[a,]==o)]<-1 # get the bit of li_table that corresponds to current a, and look at which h's get this o. Taking the compressed li and turning it to vector w li of each possibility. Put a 1 in for anything compatible with the outcome
#calculate the preposterior (imagined post you would have if you had seen the o given a)
post.un<-prior*li
post<-post.un/sum(post.un) # normalise . So this 1 try, we have 50/50 between H2 and H13
mar_li[o+2]<-sum(prior[which(li_table[a,]==o)]) # The o+2 is to get it to correspond to the column identities. here we cheated and used the outcome loop as the outcome vector, loping -1, to 1. This future would be informative, but we're unlikely to see it, cos only if gt is 2/24 of the possible ones.
# 79-83 is bayes for each o of a
#if at depth:
if (depth>=max_depth)
{
#What is the posterior eig?
ig[o+2]<- prior_entropy - -sum(log2(post)*post, na.rm=T)
#And what is the marginal probability of the outcome
} else {
#else call recursive_EIG
tmp<-recursive_EIG(post, depth=depth, max_depth = max_depth)
ig[o+2]<-tmp[[1]]
}
} #o
eig[a]<-sum(ig*mar_li, na.rm=T) # having thought about the li's, merge the 3 igs into expected ig. on average how many bits do we get with that first a
} #a
head(eig)
eig
max(eig)
which.max(eig)
#Return the marginal EIG (and the (set of) winning actions)
list(max(eig), which(eig==max(eig)))
which(eig==max(eig))
library(mdp)
apply(10, 5, ...)
apply(10, 2)
apply(mar_li, 10, ig)
matrix(H, nrow = 3, ncol = 3)
playing <- matrix(H, nrow = 3, ncol = 3)
View(playing)
playing
install.packages("MDPtoolbox")
library(MDPtoolbox)
up <- matrix(c(1,0,0,0,.7,.2,.1,0,0,.1,.2,.7,0,0,0,1), nrow = 4, ncol = 4, byrow = T)
up
row.names(uo) <- paste0('S', 1:4)
row.names(up) <- paste0('S', 1:4)
up
col.names(up) <- paste0('S', 1:4)
column.names(up) <- paste0('S', 1:4)
names(up) <- paste0('S', 1:4)
up
up <- df(matrix(c(1,0,0,0,.7,.2,.1,0,0,.1,.2,.7,0,0,0,1), nrow = 4, ncol = 4, byrow = T))
up <- data.frame(matrix(c(1,0,0,0,.7,.2,.1,0,0,.1,.2,.7,0,0,0,1), nrow = 4, ncol = 4, byrow = T))
names(up) <- paste0('S', 1:4)
up
up <- matrix(c(1,0,0,0,.7,.2,.1,0,0,.1,.2,.7,0,0,0,1), nrow = 4, ncol = 4, byrow = T)
left <- matrix(c(.9,.1,0,0,.1,.9,0,0,0,.7,.2,.1,0,0,.1,.9), nrow = 4, ncol = 4, byrow = T)
down <- matrix(c(.3,.7,0,0,0,.1,.9,0,0,0,.7,.3), nrow = 4, ncol = 4, byrow = T)
right <- matrix(c(.9,.1,0,0,.1,.2,.7,0,0,0,.9,.1,0,0,.1,.9), nrow = 4, ncol = 4, byrow = T)
# Aggregate matrices to create transition probs into list T
T <- list(up=up, left=left, down=down, right=right)
up
lwft
left
down
right
down <- matrix(c(.3,.7,0,0,0,.9,.1,0,0,.1,.9,1,0,0,.7,.3), nrow = 4, ncol = 4, byrow = T)
down <- matrix(c(.3,.7,0,0,0,.9,.1,0,0,.1,.9,1,0,0,.7,.3), nrow = 4, ncol = 4, byrow = T)
down <- matrix(c(.3,.7,0,0,0,.9,.1,0,0,.1,.9,.1,0,0,.7,.3), nrow = 4, ncol = 4, byrow = T)
down <- matrix(c(.3,.7,0,0,0,.9,.1,0,0,.1,.9,.1,0,0,.7,.3), nrow = 4, ncol = 4, byrow = T)
down
down
down <- matrix(c(.3,.7,0,0,0,.9,.1,0,0,.1,.9,0,0,0,.7,.3), nrow = 4, ncol = 4, byrow = T)
down <- matrix(c(.3,.7,0,0,0,.9,.1,0,0,.1,.9,0,0,0,.7,.3), nrow = 4, ncol = 4, byrow = T)
down <- matrix(c(.3,.7,0,0,0,.9,.1,0,0,.1,.9,0,0,0,0.7,0.3), nrow = 4, ncol = 4, byrow = T)
right <- matrix(c(.9,.1,0,0,.1,.2,.7,0,0,0,.9,.1,0,0,.1,.9), nrow = 4, ncol = 4, byrow = T)
up <- matrix(c(1,0,0,0,.7,.2,.1,0,0,.1,.2,.7,0,0,0,1), nrow = 4, ncol = 4, byrow = T)
left <- matrix(c(.9,.1,0,0,.1,.9,0,0,0,.7,.2,.1,0,0,.1,.9), nrow = 4, ncol = 4, byrow = T)
down <- matrix(c(.3,.7,0,0,0,.9,.1,0,0,.1,.9,0,0,0,0.7,0.3), nrow = 4, ncol = 4, byrow = T)
right <- matrix(c(.9,.1,0,0,.1,.2,.7,0,0,0,.9,.1,0,0,.1,.9), nrow = 4, ncol = 4, byrow = T)
# Aggregate matrices to create transition probs into list T
T <- list(up=up, left=left, down=down, right=right)
R <- matrix(c(-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,10,10,10,10),nrow = 4, ncol = 4, byrow = T)
R <- matrix(c(-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,10,10,10,10),nrow = 4, ncol = 4, byrow = T)
R <- matrix(c(-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,10,10,10,10), nrow = 4, ncol = 4, byrow = T)
# Installation using devtools
install.packages(devtools)
# Installation using devtools
install.packages("devtools")
devtools::install.github("nproellochs/ReinforcementLearning")
# Load package
library(ReinforcementLearning)
install.packages("ReinforcementLearning")
# Load package
library(ReinforcementLearning)
# Load exemplary environment (gridworld)
?gridworldEnvironment
env <- gridworldEnvironment
print(env)
?sampleExperience
data <- sampleExperience(N = 1000,env = env,states = states,actions = actions)
# Also define possible states and action sets as vectors
states <- c("s1", "s2", "s3", "s4")
actions <- c("up", "down", "left", "right")
data <- sampleExperience(N = 1000,env = env,states = states,actions = actions)
head(data)
setwd("~/Documents/Website")
setwd("~/Documents/Website")
setwd("~/Documents/Website/_publications")
